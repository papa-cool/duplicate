// The function letterScore return the score generated by the current round for a given position
// based on the game data (board and french letters) and the round data (position of the letters).
//
// The format of a position is a string like "x-y" where x and y are numbers between 0 and 14.
//
// BOARD contains the position of double/triple letter/word case
// FRENCH_POINTS contains the value for each letter
// currentCoordinates contains the position of the letters of the round.
//    Double/triple letter/word are taken into account on these positions.
// savedCoordinates contains the position of the letters from the previous rounds.
//    Double/triple letter/word are ignore on these positions.
// currentCoordinates as savedCoordinates are objects with position as key and letter as value
// key is the position we are checking
// The return value
//    is null if the case is empty
//    contains only a score if a letter from a previous round is on the case
//    contains a score and a factor if a letter from the current round is on the case.
//      All letters from the line/column will be multiplied by the factor.
export default function letterScore(BOARD, FRENCH_POINTS, currentCoordinates, savedCoordinates, key) {
  if(savedCoordinates[key]) {
    return { score: FRENCH_POINTS[savedCoordinates[key]] }
  }
  if(!currentCoordinates[key]) { return }

  let score, factor
  score = FRENCH_POINTS[currentCoordinates[key]]

  let [line, column] = key.split('-').map(value => parseInt(value, 10))
  switch(BOARD[line][column]['type']) {
    case 'TripleWord':
      factor = 3
      break
    case 'DoubleWord':
      factor = 2
      break
    case 'TripleLetter':
      score = score * 3
      break
    case 'DoubleLetter':
      score = score * 2
      break
    default:
  }

  return { score: score, factor: factor }
}